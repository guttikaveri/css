* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  /* 
  div {
    background-color: burlywood;
    width: 400px;
    height: 300px;
    display: none;
    visibility: hidden;
  } */
  
  /* we can apply height and width to block level element but we cannot the same to inline element  */
  /* Display will remove the element from the viewport and it wont occupy any space on document but visibility will occupy the space and make the element invisible */
  
  /*span {
    background-color: cadetblue;
    width: 400px;
    height: 30px;
    display: inline-block;
     visibility: hidden;
  } */
  
  /* Flexbox layout is way to arrange elements in either x-axis or y-axis, meeaning provide the space between the elements and arrange in one dimensional model  */
  /* display: inline-flex and flex  */
  
  .parent {
    width: 90%;
    margin: auto;
    background-color: yellow;
    border: 1px solid red;
    height: 90vh;
    display: flex;
    /* flex-direction: row-reverse, row, column, column-reverse */
    flex-direction: row;
    /* justify-content: space-evenly, space-around, space-between, start(default), end, center; */
    justify-content: space-evenly;
    align-items: center;
    /* flex-wrap: nowrap, wrap, wrap-reverse; */
    flex-wrap: wrap;
  }
  
  /* cross axis and main axis : when direction of flex items is row then direction of placed elements
  would main axis and opposite would be cross axis, when the direction of element is column then,
   then however the elements are being placed that would be main axis and opposite would be cross axis  */
  
  .items {
    background-color: cadetblue;
    width: 70px;
    height: 50px;
    border: 1px solid black;
  }
  
  .item1 {
    align-self: flex-end;
    flex-grow: 4;
  }
  
  .item3 {
    align-self: flex-start;
  }
  .item4 {
    align-self: flex-start;
    flex-grow: 3;
  }
  .item7 {
      align-self: flex-start;
      flex-grow: 9;
      flex-shrink: 1;
  }
  .item2 {
    align-self: flex-start;
  
  }